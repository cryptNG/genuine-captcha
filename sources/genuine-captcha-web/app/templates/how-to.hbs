{{page-title "HowTo"}}
<DashBar @route="api"/>
<div class="page">
    <div class="page-content">
      <style>
        .styled {
    max-width: none;
    background-color: white;
    padding: 30px;
}
.words-wrap {
    word-wrap: break-word;
}
.w-full {
    width: 100%;
}
.text {
    --tw-text-body: #374151;
    --tw-text-bullets: #d1d5db;
    --tw-text-code: #111827;
    font-size: 1rem;
    line-height: 1.75;
}
.text {
    color: var(--tw-text-body);
    max-width: 50rem;
}

.text :where(.text>:first-child):not(:where([class~=not-text] *)) {
    margin-top: 0;
}
.text :where(p):not(:where([class~=not-text] *)) {
    margin-bottom: 1.25em;
    margin-top: 1.25em;
}
h1, h2, h3, h4, h5, h6, hr, p, pre {
    margin: 0;
}

*, :after, :before {
    border: 0 solid #d9d9e3;
    box-sizing: border-box;
}

.styled ol, .styled ul {
    display: flex;
    flex-direction: column;
    padding-left: 1rem;
}
.styled ol {
    counter-reset: item;
}
.text :where(ol):not(:where([class~=not-text] *)) {
    list-style-type: decimal;
    margin-bottom: 1.25em;
    margin-top: 1.25em;
    padding-left: 1.625em;
}
ol, ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

.styled ol li, .styled ol li>p, .styled ol ol, .styled ol ul, .styled ul li, .styled ul li>p, .styled ul ol, .styled ul ul {
    margin: 0;
}
.text :where(ol>li):not(:where([class~=not-text] *)) {
    padding-left: 0.375em;
}
.text :where(li):not(:where([class~=not-text] *)) {
    margin-bottom: 0.5em;
    margin-top: 0.5em;
}

.text :where(.text>ol>li>:last-child):not(:where([class~=not-text] *)) {
    margin-bottom: 1.25em;
}
.text :where(.text>ol>li>:first-child):not(:where([class~=not-text] *)) {
    margin-top: 1.25em;
}
.text :where(code):not(:where([class~=not-text] *)) {
    color: var(--tw-text-code);
    font-size: .875em;
    font-weight: 600;
}
code, pre {
    font-family: Söhne Mono,Monaco,Andale Mono,Ubuntu Mono,monospace!important;
    font-size: 1em;
}

.text :where(pre):not(:where([class~=not-text] *)) {
    background-color: transparent;
    border-radius: 0.375rem;
    color: currentColor;
    font-size: .875em;
    font-weight: 400;
    line-height: 1.7142857;
    margin: 0;
    overflow-x: auto;
    padding: 0;
}



.bg-black {
    --tw-bg-opacity: 1;
    background-color: rgba(0,0,0,var(--tw-bg-opacity));
}
.rounded-md {
    border-radius: 0.375rem;
}
.mb-4 {
    margin-bottom: 1rem;
}

.text-gray-200 {
    --tw-text-opacity: 1;
    color: rgba(217,217,227,var(--tw-text-opacity));
}
.text-xs {
    font-size: .75rem;
    line-height: 1rem;
}
.font-sans {
    font-family: Söhne,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif,Helvetica Neue,Arial,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;
}
.py-2 {
    padding-bottom: 0.5rem;
    padding-top: 0.5rem;
}
.px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
}
.bg-gray-800 {
    --tw-bg-opacity: 1;
    background-color: rgba(52,53,65,var(--tw-bg-opacity));
}
.rounded-t-md {
    border-top-left-radius: 0.375rem;
    border-top-right-radius: 0.375rem;
}
.justify-between {
    justify-content: space-between;
}
.items-center {
    align-items: center;
}
.flex {
    display: flex;
}
.relative {
    position: relative;
}

.p-4 {
    padding: 1rem;
}
.overflow-y-auto {
    overflow-y: auto;
}

.gap-2 {
    gap: 0.5rem;
}
.flex {
    display: flex;
}
.ml-auto {
    margin-left: auto;
}
[role=button], button {
    cursor: pointer;
}
[type=button], [type=reset], [type=submit], button {
    -webkit-appearance: button;
    background-color: transparent;
    background-image: none;
}
button, select {
    text-transform: none;
}
button, input, optgroup, select, textarea {
    color: inherit;
    font-family: inherit;
    font-size: 100%;
    font-weight: inherit;
    line-height: inherit;
    margin: 0;
    padding: 0;
}

:not(pre)>code.hljs, :not(pre)>code[class*=language-] {
    border-radius: 0.3em;
    padding: 0.1em;
    white-space: normal;
}
code.hljs, code[class*=language-], pre[class*=language-] {
    word-wrap: normal;
    background: none;
    color: #fff;
    -webkit-hyphens: none;
    hyphens: none;
    line-height: 1.5;
    tab-size: 4;
    text-align: left;
    white-space: pre;
    word-break: normal;
    word-spacing: normal;
}
.\!whitespace-pre {
    white-space: pre!important;
}
.text :where(pre code):not(:where([class~=not-text] *)) {
    background-color: transparent;
    border-radius: 0;
    border-width: 0;
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    padding: 0;
}
.text :where(code):not(:where([class~=not-text] *)) {
    color: var(--tw-text-code);
    font-size: .875em;
    font-weight: 600;
}

      </style>
<div class="styled text w-full words-wrap dark:text-invert light">
  <style>
        .code-block { background-color: #f4f4f4; padding: 10px; border: 1px solid #ddd; margin: 10px 0; }
        h2 { color: #333; }
    </style>
  <h1>Genuine Captcha<sup>©</sup> API: Integration Guide</h1>

    <h2>Step 1: Generate a CAPTCHA</h2>
    <p>Initiate a CAPTCHA challenge for your users.</p>
    <p><strong>Endpoint:</strong></p>
    <div class="code-block">
        GET https://api.genuine-captcha.io/api/captcha/create
    </div>
    <p><strong>Sample Request:</strong></p>
    <pre class="code-block">
fetch('https://api.genuine-captcha.io/api/captcha/create')
  .then(response => response.json())
  .then(data => console.log(data));
    </pre>
    <p><strong>Response:</strong></p>
    <pre class="code-block">
{
  "ImageAsBase64": "[base64-encoded-image]",
  "SecretAsBase64": "[encoded-secret]"
}
    </pre>

    <h2>Step 2: Solve and Verify the CAPTCHA</h2>
    <p>After the user solves the CAPTCHA, verify their solution.</p>
    <p><strong>Endpoint:</strong></p>
    <div class="code-block">
        GET https://api.genuine-captcha.io/api/captcha/verify?captchaSolution=USER_SOLUTION&captchaSecret=SECRET_FROM_CREATE
    </div>
    <p><strong>Sample Request:</strong></p>
    <pre class="code-block">
const captchaSolution = "21"; // User-provided solution
const captchaSecret = "apiSecret"; // Secret received from the create call

fetch(`https://api.genuine-captcha.io/api/captcha/verify?captchaSolution=${captchaSolution}&captchaSecret=${captchaSecret}`)
  .then(response => {
    if(response.ok) {
      console.log("CAPTCHA verified successfully");
    } else {
      console.log("CAPTCHA verification failed");
    }
  });
    </pre>
    <p><strong>Responses:</strong></p>
    <ul>
        <li>HTTP 200: CAPTCHA verified successfully.</li>
        <li>HTTP 400: CAPTCHA verification failed.</li>
    </ul>

    <h2>Alternative Methods</h2>

    <h3>Custom Secret Creation</h3>
    <p>Create a CAPTCHA with your own secret.</p>
    <p><strong>Endpoint:</strong></p>
    <div class="code-block">
        GET https://api.genuine-captcha.io/api/captcha/create/custom?customSecret=YOUR_OWN_SECRET
    </div>
    <p><strong>Sample Request:</strong></p>
    <pre class="code-block">
const customSecret = "yourOwnSecret";

fetch(`https://api.genuine-captcha.io/api/captcha/create/custom?customSecret=${customSecret}`)
  .then(response => response.json())
  .then(data => console.log(data));
    </pre>

    <h3>Custom Secret Verification</h3>
    <p>Verify the CAPTCHA using your own secret.</p>
    <p><strong>Endpoint:</strong></p>
    <div class="code-block">
        GET https://api.genuine-captcha.io/api/captcha/verify/custom?captchaSolution=USER_SOLUTION&captchaSecret=SECRET_FROM_CREATE&customSecret=YOUR_OWN_SECRET
    </div>
    <p><strong>Sample Request:</strong></p>
    <pre class="code-block">
const captchaSolution = "21";
const captchaSecret = "apiSecret";
const customSecret = "yourOwnSecret";

fetch(`https://api.genuine-captcha.io/api/captcha/verify/custom?captchaSolution=${captchaSolution}&captchaSecret=${captchaSecret}&customSecret=${customSecret}`)
  .then(response => {
    if(response.ok) {
      console.log("CAPTCHA verified with custom secret successfully");
    } else {
      console.log("CAPTCHA verification with custom secret failed");
    }
  });
    </pre>

    <p>This HTML document provides a structured and formatted guide for integrating Genuine Captcha<sup>©</sup> into web applications.</p>
 </div>
</div>
</div>